//
//  VersionXTests.m
//  VersionXTests
//
//  Created by Gary W. Longsine on 10/24/15.
//
//

#import <XCTest/XCTest.h>
#import "VersionXController.h"

@interface VersionXTests : XCTestCase

@end

@implementation VersionXTests

- (void)setUp {
    [super setUp];
    // Put setup code here. This method is called before the invocation of each test method in the class.
}

- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
}

- (void)testVersionXSanity {
    /* This is just a sanity check.  In theory, if the project builds to the point where
     Xcode is willing to run a unit test, then this test should always pass with flying colors */

    VersionXController *myVersion = [[VersionXController alloc] init];
    XCTAssertNotNil(myVersion, @"Initialized VersionXController Object myVersion should not be nil");
}

- (void)testVersionXFancyAppName {
    /* Most of the values generated by VersionX change every time the project is compiled 
     but the name of the app, when doing a unit testing build will always be "VersionX (DEBUG)"  */
    
    VersionXController *myVersion = [[VersionXController alloc] init];

    XCTAssertNotNil([myVersion fancyApplicationName], @"fancyApplicationName isn't nil.");
    XCTAssertNotEqual([myVersion fancyApplicationName], @"", @"fancyApplicationName isn't blank");
    XCTAssertEqualObjects([myVersion fancyApplicationName], @"VersionX (DEBUG)", @"fancyApplication name (during unit tests) should be: VersionX (DEBUG), and it is: %@", [myVersion fancyApplicationName]);
}

- (void) testVersionXbuildStyle {
    /* The buildStyle will always be set to "Debug" during a unit test build,
     so we can test this, too (if there's a weird problem, the buildStyle will probably be blank) */
    
    VersionXController *myVersion = [[VersionXController alloc] init];
    XCTAssertEqualObjects([myVersion buildStyle], @"Debug", @"buildStyle should be: Debug (during unit tests) and it is: %@", [myVersion buildStyle]);
}

- (void) testVersionXbranch {
    /* VersionX could be used to enforce that product unit testing builds be done in a particular branch.
     In this case, the branch master is enforced by the unit test.  Probably not likely to be useful. */
    
    VersionXController *myVersion = [[VersionXController alloc] init];
    XCTAssertEqualObjects([myVersion branch], @"[master]", @"branch should be: [master] (during unit tests) and it is: %@", [myVersion branch]);
}

@end
